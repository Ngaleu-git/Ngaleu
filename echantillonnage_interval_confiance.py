# üìå Importation des biblioth√®ques n√©cessaires
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt

# üìå 1. G√©n√©ration de donn√©es suivant une loi normale N(12, 4)
np.random.seed(123)  # Pour la reproductibilit√©
X = np.random.normal(loc=12, scale=2, size=25)  # ùúé = sqrt(4) = 2

# Affichage des premi√®res valeurs
print("Premi√®res valeurs g√©n√©r√©es :", np.round(X[:5], 3))

# üìå 2. Estimation des param√®tres (moyenne et variance)
m_estimee = round(np.mean(X), 3)
variance_estimee = round(np.var(X, ddof=1), 3)  # ddof=1 pour variance d‚Äô√©chantillon

print(f"Moyenne estim√©e : {m_estimee}")
print(f"Variance estim√©e : {variance_estimee}")

# üìå 3. Intervalle de confiance √† 95%
ic_95 = stats.t.interval(confidence=0.95, df=len(X)-1, loc=np.mean(X), scale=stats.sem(X))
ic_95 = [round(val, 3) for val in ic_95]

print(f"Intervalle de confiance √† 95% pour la moyenne : {ic_95}")

# üìå 4. Intervalles de confiance √† 90% et 99%
ic_90 = stats.t.interval(0.90, df=len(X)-1, loc=np.mean(X), scale=stats.sem(X))
ic_99 = stats.t.interval(0.99, df=len(X)-1, loc=np.mean(X), scale=stats.sem(X))

print(f"IC √† 90% : {[round(val, 3) for val in ic_90]}")
print(f"IC √† 99% : {[round(val, 3) for val in ic_99]}")

# üìå 5. Influence de la taille de l‚Äô√©chantillon
X15 = np.random.normal(12, 2, 15)
X100 = np.random.normal(12, 2, 100)
X1000 = np.random.normal(12, 2, 1000)

for sample, name in zip([X15, X100, X1000], ["n=15", "n=100", "n=1000"]):
    ic = stats.t.interval(0.95, df=len(sample)-1, loc=np.mean(sample), scale=stats.sem(sample))
    print(f"{name} ‚Üí IC √† 95% : {[round(val, 3) for val in ic]}")

# üìå 6. Visualisation (optionnelle)
plt.figure(figsize=(10, 5)) #  Cr√©e une nouvelle figure pour le graphique avec une taille de 10 pouces par 5.
plt.hist(X, bins=10, density=True, alpha=0.6, color='skyblue', label='Donn√©es simul√©es') #  Cr√©e une nouvelle figure pour le graphique avec une taille de 10 pouces par 5.
xmin, xmax = plt.xlim() #  R√©cup√®re les bornes de l‚Äôaxe X (gauche et droite) de l‚Äôhistogramme pour savoir o√π tracer la courbe.
x = np.linspace(xmin, xmax, 100) # Cr√©e 100 points entre xmin et xmax, pour pouvoir tracer une courbe lisse ensuite.
p = stats.norm.pdf(x, np.mean(X), np.std(X, ddof=1)) # Calcule les valeurs de la densit√© de la loi normale (PDF) :
"""
centr√©e sur la moyenne de X,

avec l‚Äô√©cart-type de X corrig√© (avec ddof=1).

"""
plt.plot(x, p, 'k', linewidth=2, label='Courbe normale estim√©e')
"""
‚û°Ô∏è Trace la courbe de Gauss estim√©e :

x = valeurs de l‚Äôaxe horizontal,

p = valeurs de la densit√© normale,

'k' = couleur noire (k = black),

linewidth=2 = √©paisseur de la ligne,

label='Courbe normale estim√©e' = pour la l√©gende.

"""
plt.title('Histogramme des donn√©es et ajustement d\'une loi normale')
plt.xlabel('Valeurs')
plt.ylabel('Densit√©')
plt.legend()
plt.grid(True)
plt.show()

########################################################################################################################################################
import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt

# Param√®tres
N = 50        # Nombre de r√©p√©titions
m = 12       # Vraie moyenne
sigma = 2     # √âcart-type
n = 30        # Taille de l'√©chantillon
alpha = 0.05  # Risque (donc 95% de confiance)

# Fonction pour construire l'intervalle de confiance
def conf_interval(data, alpha=0.05):
    mean = np.mean(data)
    sem = stats.sem(data)  # Erreur standard
    margin = stats.t.ppf(1 - alpha/2, df=len(data) - 1) * sem
    return mean - margin, mean, mean + margin

# Simulation
intervals = []
for _ in range(N):
    sample = np.random.normal(mu, sigma, n)
    intervals.append(conf_interval(sample, alpha))

# Analyse : combien ne couvrent pas la vraie moyenne ?
non_couv = [i for i, (low, _, high) in enumerate(intervals) if not (low <= mu <= high)]
pourcentage_non_couv = len(non_couv) * 100 / N
print(f"{len(non_couv)} intervalles ne contiennent pas la vraie moyenne.")
print(f"Pourcentage : {pourcentage_non_couv:.1f}%")

# Visualisation
for i, (low, mean, high) in enumerate(intervals):
    color = 'red' if i in non_couv else 'green'
    plt.plot([i, i], [low, high], color=color)
    plt.plot(i, mean, 'o', color=color)

plt.axhline(mu, color='blue', linestyle='--', label='Vraie moyenne')
plt.title("Intervalles de confiance pour 50 √©chantillons")
plt.xlabel("√âchantillon")
plt.ylabel("Valeur")
plt.legend()
plt.show()
